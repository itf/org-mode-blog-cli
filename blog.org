#+OPTIONS:   broken-links:mark
#+OPTIONS: toc:nil num:3 H:4 ^:{} pri:t title:nil  html-style:nil html5-fancy:t
#+HTML_DOCTYPE: html5
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/org.css"/>
#+HTML_HEAD: <link rel="icon" href="ico/favicon.ico" type="image/x- icon">
# -*- eval: (load (concat (file-name-directory buffer-file-name) "exporter.el")); -*-
-#+OPTIONS: \n:t
* Quick Start :instructions:macros:foo:
  :PROPERTIES:
  :CREATION-DATE: 2022-07-23
  :MODIFICATION-DATE: 2022-07-23
  :HASH:     a5465ccef1599867ac7321551864af8b
  :PREVIOUS-HASH: a5465ccef1599867ac7321551864af8b
  :END:
** What is?
This script converts a single org-mode file into a static website. It converts each heading into a separate file.

Every linked file will be hard linked to EXTENSION/FILE.EXTENSION and all the links in the org file export will be fixed. 

** How to use
Clone this file and create new headings, or add 2 new headings to your file, one tagged ":header:noexport:" and another ":footer". Headings are the top level sections, i.e. create "* header" and "* footer".  Those 2 headings cannot have property drawers.

Then, modify the first few lines of the export.el script to add the information about your blog and the name of the page that will contain all the tags. Then:

To export the new changed files
#+begin_src shell
exporter.el SOURCE DESTINATION
#+end_src

To export every file:
#+begin_src shell
exporter.el SOURCE DESTINATION t
#+end_src

The script will deal with all the linked files you have
** How to use from emacs
if you load the file, 2 new interactive functions will be defined:
#+begin_src el
(org-export-head)
(org-export-head-reexport)
#+end_src

Call the first if you want to only publish the headings that had changes, and the second if you want to recompile all.
** Tags?
So far the only tags we use are:  header, noexport, reexport and footer.

Put a header tag to mark what is the header that should be copied to every page.

Put a footer tag to mark what should be copied to every page right after the content.

Mark something with reexport to always reexport something even if there is no internal change (example, the index).

Put the noexport tag to state that some heading should not become a page. The 
** Macros

You can use the macros ###MACRO### (# # # MACRO # # #), a word surrounded by 3 pound signs with no spaces., which will be replaced with that particular headline property taken from the drawer.

There are also some "universal macros", INDEX-WITH-DATES, TAG-WITH-DATES, where TAG is any of the tags used in the file. As well as INDEX or TAG.

You can also use ALL-TAGS to create a file with all tags

You can see them in use in [[Macros]]
** Convenience
I recommend creating a publish folder next to the folder of the website and use
#+begin_src sh
git worktree add  ../publish/ gh-pages 
#+end_src

You may want to have these in your org file, so you can simply click on them in order to publish.
  [[shell: ./exporter.el blog.org ../publish/]]
  [[shell: ./exporter.el blog.org ../publish/ t]]
[[elisp:(revert-buffer)]]

* Macros :examples:macros:foo:
  :PROPERTIES:
  :CREATION-DATE: 2022-07-23
  :MODIFICATION-DATE: 2022-07-23
  :HASH:     b2bd9f23e55970bb53445d227b634027
  :PREVIOUS-HASH: 72f06922b5ad9329b4ed3fa54c1424bd
  :END:
This page contain examples of macros
  
** TAG (EXAMPLES)
###EXAMPLES###
** INDEX-WITH-DATES
###INDEX-WITH-DATES###
** TITLE
###TITLE###
** CREATION-DATE MODIFICATION-DATE --- TAGSBUTTONS NEXT PREVIOUS] 
###CREATION-DATE### ###MODIFICATION-DATE### --- ###TAGSBUTTONS### ###NEXT### ###PREVIOUS###
** TAG-WITH-SUMMARIES (macro)
###MACRO-WITH-SUMMARIES###
** TAG-WITH-SUMMARIES-TAGS (macro)
###MACRO-WITH-SUMMARIES-TAGS###
** TAG-TAGS (FOO)
###FOO-TAGS###

** ALL-TAGS-WITH-DATES
This one will be weird, since it will create
*** test
###ALL-TAGS-WITH-DATES###
* Export command :noexport:example:
This file won't be exported.

* Includes :noexport:
Creates a hard link to org.css in the export directory.
[[file:./org.css]]
file:./favicon.ico
      
* Menu :noexport:header:

#+begin_head
#+begin_title
[[Quick Start][org-mode-blog-cli]]
#+end_title

#+begin_menu
- [[Quick Start][Home]]
- [[Macros][Macros]]
- [[index][Index]]
#+end_menu
#+end_head

@@html: </p><h1>@@
###TITLE###
@@html: </h1><p>@@

@@html:<span class=page-date> <small>@@
###CREATION-DATE###, updated ###MODIFICATION-DATE### --- ###TAGSBUTTONS### @@html: &nbsp@@  [[###NEXT###][⇦###NEXT###]] -- [[###PREVIOUS###][###PREVIOUS###⇨]] 
@@html:</small> </span> @@
#+TOC: headlines 2
* Footer :noexport:footer:
#+BEGIN_EXPORT html
</div></div>
<br>
<div class="comments">
<div id="disqus_thread"></div>
<script type="text/javascript">
/* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
    var disqus_shortname = 'ivanaf'; // Required - Replace '<example>' with your forum shortname
    /* * * DON'T EDIT BELOW THIS LINE * * */
    var showComments = function() {
    var button = document.getElementById('comment-button')
        button.style.display = 'none'
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        };
    </script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<button id="comment-button" onclick="showComments()">Show comments</button>
</div>
<div><div>
#+END_EXPORT

* index                           :reexport:foo:example:
  :PROPERTIES:
  :CREATION-DATE: 2018-09-09
  :MODIFICATION-DATE: 2022-07-23
  :HASH:     7874a98e9e8f3b2a7fc488bc727b108c
  :PREVIOUS-HASH: 19a05526dca785ee24344f0f7755a458
  :export_options: num:nil
  :END:

  This is the index.
#+BEGIN_EXPORT html 
<style>
#table-of-contents {
display: none;
}
</style>
#+END_EXPORT

Hi, welcome to the example index page it hides the table of content and defines its own style for the elements.

It also adds some inline javascript for having nice tags.

#+Begin_index
 Filter by tags:\\
###INDEX-TAGS###
###INDEX-WITH-SUMMARIES-TAGS###
#+End_index
#+BEGIN_EXPORT html
<style>
.index h2{
 font-size:1.6em;
 margin-top:0.67em;
 margin-bottom:0.67em;
 margin-left:0;
 margin-right:0;
 font-weight:bold
}
.index ul li {
 /*! border-top:dotted 2px rgba(160,160,160,0.3); */
 margin:1.5em 0 0 0;
}
.index ul {
 margin-left:0px;
 list-style:none;
padding-left: 1em;
}
.index ul li b a {
 text-align:left;
 display:block;
 font-size:1.3em;
 margin-top:0.83em;
 margin-left:0;
 margin-right:0;
 font-weight:bold
}
.index {
 box-shadow:0px 0px 1px rgba(0,0,0,0.5);
 padding:10px;
 margin-top:20px
}
.rss-item-auth {
 text-align:left;
 font-size:14px;
 color:#828282
}
.rss-date {
 text-align:left;
 display:block;
 font-size:14px;
 font-weight:800;
 color:#828282
}
.post{
  border-top: dotted 2px rgba(160,160,160,0.3);
}
</style>
#+END_EXPORT
#+BEGIN_SRC inline-js
function getAllByTag(tag){
    return Array.from(document.querySelectorAll("."+tag));
}
function getAllPosts(){
    return getAllByTag('post');
}

function getAllButtons(){
    return getAllByTag('tagbutton');
}


function getButtonsByTag(tag){
    return Array.from(document.querySelectorAll('.'+tag +'.tagbutton'));
}

function getAllFilterItems() {
    return getAllByTag('tagindex');
}

function getAllTags(){
    return getAllFilterItems().map(x=>x.text);
}

function getActiveTags(){
    const filterItems = getAllFilterItems();
    return filterItems.map(
        x=> {
        if (x.classList.contains('active'))
            return x.text
        }
    ).filter(x => x!== undefined)
}
function getAllClasses(){
    const allTags = getAllTags();
    return allTags.map(x => "."+x);
}
function getActiveClasses () {
    const activeTags = getActiveTags();
    if (activeTags.length == 0)
        return getAllClasses();
    else
        return activeTags.map(x=>"." + x);
}
function getAllActivePosts(){
    const activeSelector = getActiveClasses().map(x=>".post"+x).join(",");
    return Array.from(document.querySelectorAll(activeSelector));
}

function setVisibilityPosts(){
    const allPosts = getAllPosts();
    allPosts.forEach(x=> x.style.display = "none")
    const activePosts = getAllActivePosts();
    activePosts.forEach(x=> x.style.display = "")
}

function addEventListeners(){
    const buttons = getAllButtons();
    buttons.forEach(x => x.addEventListener("click", event => {
        event.preventDefault();
        return toggleTag(event.target.text)}))}


function toggleTag(tag){
    const buttons = getButtonsByTag(tag);
    buttons.forEach(x=>x.classList.toggle('active'));
    setUrlTags();
    setVisibilityPosts();
}

function addTag(tag){
    const buttons = getButtonsByTag(tag);
    buttons.forEach(x=>x.classList.add('active'));
}

function setUrlTags() {
  const tags = getActiveTags();
  if (tags.length > 0) {
    history.replaceState(undefined, undefined,  '#' + Array.prototype.join.call(tags, ','))
  }
  else
    history.replaceState(undefined, undefined,  '#')
}

function getUrlTags() {
  const hash = document.location.hash.substr(1)
  if (hash === '') {
    return []
  } else{
    return hash.split(',')
  }
}

function enableTags(tags) {
    tags.forEach(tag=>addTag(tag));
    setVisibilityPosts();
}

enableTags(getUrlTags());
addEventListeners();

#+END_SRC
#+BEGIN_EXPORT html
<style>
.outline-2 h2{
 font-size:1.6em;
 margin-top:0.67em;
 margin-bottom:0.67em;
 margin-left:0;
 margin-right:0;
 font-weight:bold
}
.outline-text-2 ul li {
 border-top:dotted 2px rgba(160,160,160,0.3);
 margin:1.5em 0 0 0
}
.outline-text-2 ul {
 margin-left:0px;
 list-style:none;
padding-left: 1em;
}
.outline-text-2 ul li b a {
 text-align:left;
 display:block;
 font-size:1.3em;
 margin-top:0.83em;
 margin-left:0;
 margin-right:0;
 font-weight:bold
}
.outline-2 {
 box-shadow:0px 0px 1px rgba(0,0,0,0.5);
 padding:10px;
 margin-top:20px
}
.rss-item-auth {
 text-align:left;
 font-size:14px;
 color:#828282
}
.rss-date {
 text-align:left;
 display:block;
 font-size:14px;
 font-weight:800;
 color:#828282
}
</style>
#+END_EXPORT
* Foo pages                                                :reexport:example:
:PROPERTIES:
:CREATION-DATE: 2020-07-23
:MODIFICATION-DATE: 2022-07-23
:HASH:     ca77c73ee82367d39c3b4be0e257768f
:PREVIOUS-HASH: 942d51772a95e65f37225594f1042954
:END:

This file contains all the foo pages

#+BEGIN_EXPORT html
<style>

.index h2{
 font-size:1.6em;
 margin-top:0.67em;
 margin-bottom:0.67em;
 margin-left:0;
 margin-right:0;
 font-weight:bold
}
.index ul li {
 /*! border-top:dotted 2px rgba(160,160,160,0.3); */
 margin:1.5em 0 0 0;
}
.index ul {
 margin-left:0px;
 list-style:none;
padding-left: 1em;
}
.index ul li b a {
 text-align:left;
 display:block;
 font-size:1.3em;
 margin-top:0.83em;
 margin-left:0;
 margin-right:0;
 font-weight:bold
}
.index {
 box-shadow:0px 0px 1px rgba(0,0,0,0.5);
 padding:10px;
 margin-top:20px
}
.rss-item-auth {
 text-align:left;
 font-size:14px;
 color:#828282
}
.rss-date {
 text-align:left;
 display:block;
 font-size:14px;
 font-weight:800;
 color:#828282
}
.post{
  border-top: dotted 2px rgba(160,160,160,0.3);
}
</style>
#+END_EXPORT

This page shows a link to exported files that have the foo tag.

Compare it with [[index]].
#+Begin_index
 Filter by tags:\\
###INDEX-TAGS###
###INDEX-WITH-SUMMARIES-TAGS###
#+End_index

#+BEGIN_SRC inline-js
function getAllByTag(tag){
    return Array.from(document.querySelectorAll("."+tag));
}
function getAllPosts(){
    return getAllByTag('post');
}

function getAllButtons(){
    return getAllByTag('tagbutton');
}


function getButtonsByTag(tag){
    return Array.from(document.querySelectorAll('.'+tag +'.tagbutton'));
}

function getAllFilterItems() {
    return getAllByTag('tagindex');
}

function getAllTags(){
    return getAllFilterItems().map(x=>x.text);
}

function getActiveTags(){
    const filterItems = getAllFilterItems();
    return filterItems.map(
        x=> {
        if (x.classList.contains('active'))
            return x.text
        }
    ).filter(x => x!== undefined)
}
function getAllClasses(){
    const allTags = getAllTags();
    return allTags.map(x => "."+x);
}
function getActiveClasses () {
    const activeTags = getActiveTags();
    if (activeTags.length == 0)
        return getAllClasses();
    else
        return activeTags.map(x=>"." + x);
}
function getAllActivePosts(){
    const activeSelector = getActiveClasses().map(x=>".post"+x).join(",");
    return Array.from(document.querySelectorAll(activeSelector));
}

function setVisibilityPosts(){
    const allPosts = getAllPosts();
    allPosts.forEach(x=> x.style.display = "none")
    const activePosts = getAllActivePosts();
    activePosts.forEach(x=> x.style.display = "")
}

function addEventListeners(){
    const buttons = getAllButtons();
    buttons.forEach(x => x.addEventListener("click", event => {
        event.preventDefault();
        return toggleTag(event.target.text)}))}


function toggleTag(tag){
    const buttons = getButtonsByTag(tag);
    buttons.forEach(x=>x.classList.toggle('active'));
    setUrlTags();
    setVisibilityPosts();
}

function addTag(tag){
    const buttons = getButtonsByTag(tag);
    buttons.forEach(x=>x.classList.add('active'));
}

function setUrlTags() {
  const tags = getActiveTags();
  if (tags.length > 0) {
    history.replaceState(undefined, undefined,  '#' + Array.prototype.join.call(tags, ','))
  }
  else
    history.replaceState(undefined, undefined,  '#')
}

function getUrlTags() {
  const hash = document.location.hash.substr(1)
  if (hash === '') {
    return []
  } else{
    return hash.split(',')
  }
}

function enableTags(tags) {
    tags.forEach(tag=>addTag(tag));
    setVisibilityPosts();
}

enableTags(getUrlTags());
addEventListeners();

#+END_SRC
